params:
  stability: "stable"
  excluded: ["android", "aspnetcore", "dotnet", "go", "ios", "jvm", "kestrel", "nodejs", "signalr", "v8js"]
  
templates:
  - pattern: semantic_attributes.ex.j2
    filter: >
      .groups
      | map(select(.type == "attribute_group"))
      | map(select(.id | startswith("registry.")))
      | map({ id: .id, group_id: .id | split(".") | .[1], attributes: .attributes})
      | map(select([.attributes[] | select(.stability == $stability)] | any))
      | group_by(.group_id)
      | map({ 
        id: .[0].group_id,
        attributes: [.[].attributes[] | select(.stability == $stability)] | sort_by(.id),
        output: $output
      })
      | map(select( .id as $id | any( $excluded[]; . == $id) | not ))
      | map(select(.attributes | length > 0))
    application_mode: each
  - pattern: semantic_metrics.ex.j2
    filter: >
      .groups
      | map(select(.type == "metric"))
      | map(select(.stability == $stability))
      | map({ id: .id, group_id: .id | split(".") | .[1], brief, unit, stability, deprecated, instrument, metric_name, note})
      | group_by(.group_id)
      | map({
        id: .[0].group_id,
        metrics: . | sort_by(.metric_name),
        output: $output + "/metrics/"
      })
      | map(select( .id as $id | any( $excluded[]; . == $id) | not ))
      | map(select(.metrics | length > 0))
    application_mode: each
text_maps:
  elixir_types:
    "int": "integer()"
    "int[]": "[integer()]"
    "double": "float()"
    "double[]": "[float()]"
    "boolean": "boolean()"
    "boolean[]": "[boolean()]"
    "string": "atom() | String.t()"
    "string[]": "[atom() | String.t()]"
    "template[int]": "integer()"
    "template[double]": "float()"
    "template[boolean]": "boolean()"
    "template[string]": "atom() | String.t()"
    "template[string[]]": "[atom() | String.t()]"
    "template[int[]]": "[integer()]"
    "template[double[]]": "[float()]"
    "template[boolean[]]": "[boolean()]"

acronyms: ["iOS", "HTTP", "API", "SDK", "CLI", "URL", "JSON", "XML", "HTML", "TLS", "RPC", "OS", "OCI", "GCP", "FAAS", "DNS", "DB", "AWS" ]
#   java_generic_type:
#     int: Long
#     double: Double
#     boolean: Boolean
#     string: String
#     string[]: List<String>
#     int[]: List<Long>
#     double[]: List<Double>
#     boolean[]: List<Boolean>
#     template[int]: Long
#     template[double]: Double
#     template[boolean]: Boolean
#     template[string]: String
#     template[string[]]: List<String>
#     template[int[]]: List<Long>
#     template[double[]]: List<Double>
#     template[boolean[]]: List<Boolean>
#   java_key_type:
#     int: AttributeKey<Long>
#     double: AttributeKey<Double>
#     boolean: AttributeKey<Boolean>
#     string: AttributeKey<String>
#     string[]: AttributeKey<List<String>>
#     int[]: AttributeKey<List<Long>>
#     double[]: AttributeKey<List<Double>>
#     boolean[]: AttributeKey<List<Boolean>>
#     template[int]: AttributeKeyTemplate<Long>
#     template[double]: AttributeKeyTemplate<Double>
#     template[boolean]: AttributeKeyTemplate<Boolean>
#     template[string]: AttributeKeyTemplate<String>
#     template[string[]]: AttributeKeyTemplate<List<String>>
#     template[int[]]: AttributeKeyTemplate<List<Long>>
#     template[double[]]: AttributeKeyTemplate<List<Double>>
#     template[boolean[]]: AttributeKeyTemplate<List<Boolean>>
#   java_key_factory:
#     int: longKey
#     double: doubleKey
#     boolean: booleanKey
#     string: stringKey
#     string[]: stringArrayKey
#     int[]: longArrayKey
#     double[]: doubleArrayKey
#     boolean[]: booleanArrayKey
#     template[int]: longKeyTemplate
#     template[double]: doubleKeyTemplate
#     template[boolean]: booleanKeyTemplate
#     template[string]: stringKeyTemplate
#     template[string[]]: stringArrayKeyTemplate
#     template[int[]]: longArrayKeyTemplate
#     template[double[]]: doubleArrayKeyTemplate
#     template[boolean[]]: booleanArrayKeyTemplate
