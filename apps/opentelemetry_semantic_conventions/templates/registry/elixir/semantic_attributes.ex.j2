{%- macro to_elixir_module(text) -%}
  {{ text | pascal_case }}
{%- endmacro -%}
{#- waiting on https://github.com/open-telemetry/weaver/pull/207 for split to be available -#}

  {# {{ text | snake_case_const | replace('_', ' ') | split | reject(ctx.id) | join('_') }} #}
{%- macro func_name(text) -%}
  {{ text | snake_case_const }}
{%- endmacro -%}
{%- macro to_atom(text) -%}
{% if text | split_id | length > 1 -%}:"{{ text }}"{%- else -%}:{{ text }}{%- endif %}
{%- endmacro -%}
{% macro to_elixir_type(member) -%}
  {%- if member.id == member.value -%}
    {{ to_atom(member.value) }}
  {%- else -%}
  {{ member }}
    {{ member.type | type_mapping }}
  {%- endif -%}
{%- endmacro %}
{%- macro enum_value_to_elixir_type(value) -%}
  {%- if value is string %}{{ to_atom(value) }}{% else -%}{{ value }}{%- endif %}
{%- endmacro -%}
{%- macro enum_value_return_type(value) -%}
  {%- if value is string -%}
  atom() | String.t()
  {%- elif value is integer -%}
  integer()
  {%- else -%}
  NOT_MAPPED
  {%- endif -%}
{%- endmacro -%}
{%- macro enum_value_return_type_example(value) -%}
  {%- if value is string -%}
  :custom_value
  {%- elif value is integer -%}
  27
  {%- else -%}
  NOT_MAPPED
  {%- endif -%}
{%- endmacro -%}
{%- macro enum_to_map(members) -%}
  {% raw %}%{{% endraw %}
  {% for member in members %}
    {{ to_atom(member.id) }} => {{ enum_value_to_elixir_type(member.value) }}{% if not loop.last %},{% endif %}
  {% endfor %}
  {% raw %}}{% endraw %}
{%- endmacro -%}
{%- macro strong_reqs(string) -%}
  {{ string | replace(" MUST ", " **MUST** ") | replace(" MUST NOT ", " **MUST NOT** ") | replace(" SHOULD ", " **SHOULD** ") | replace(" SHOULD NOT ", " **SHOULD NOT** ") |  replace(" MAY ", " **MAY** ") | replace(" NOT ", " **NOT** ") }}
{%- endmacro -%}

{%- set file_name = ctx.id | snake_case ~ "_attributes.ex" -%}
{%- set module_name = ctx.id | pascal_case -%}
{%- set trim_blocks = true %}
{%- set trim_lstrip_blocks = true %}
{{ template.set_file_name(file_name) }}

{%- set module_name = ctx.id | pascal_case ~ "Attributes" -%}
defmodule OpenTelemetry.SemanticConventions.{{ module_name }} do
  # This is an auto-generated file
  @moduledoc """
  OpenTelemetry Semantic Conventions for {{ ctx.id | title }} attributes.
  """
{%- for attribute in ctx.attributes | sort(attribute="name") %}
  {% if attribute.type is mapping %}
  {# @doc namespace: {{ to_atom(ctx.id) }} #}
  
  @typedoc """
  {{ strong_reqs(attribute.brief) }}

  ### Enum Values
  {% for member in attribute.type.members -%}
  * `{{ to_atom(member.id) }}`
  {%- if member is experimental %} ^[e](`m:OpenTelemetry.SemanticConventions#experimental`)^{% endif %}{% if member.brief != none %} - {% if member is deprecated %}**deprecated** ~~{% endif %}{{ member.brief }}{% if member is deprecated %}~~{% endif %}{% endif %}
  {% endfor -%}
  """
  @type {{ attribute.name | snake_case_const }}() :: {{ enum_to_map(attribute.type.members) }}
  {%- endif -%}
 
  {% if attribute is deprecated %}
  @deprecated """
  {{ attribute.deprecated | replace("\n", "\n  ") }}
  """
  {%- endif -%}
  {% if not(attribute is deprecated) %}
  @doc """
  {{ strong_reqs(attribute.brief | replace("\n", "\n  ")) }}
  {% if attribute.note -%}

  ### Notes

  {{ strong_reqs(attribute.note | replace("\n", "\n  ")) }}

  {%- endif %}

  ### Example
  {%- if attribute.type is mapping %}
      iex> OpenTelemetry.SemanticConventions.{{ module_name }}.{{ func_name(attribute.name) }}().{{ attribute.type.members|first|attr('id') }}
      {{ enum_value_to_elixir_type(attribute.type.members|first|attr('value')) }}
      
      iex> OpenTelemetry.SemanticConventions.{{ module_name }}.{{ func_name(attribute.name) }}({{ enum_value_return_type_example(attribute.type.members|first|attr('value')) }})
      {{ enum_value_return_type_example(attribute.type.members|first|attr('value')) }}
  {%- else %}
      iex> OpenTelemetry.SemanticConventions.{{ module_name }}.{{ func_name(attribute.name) }}()
      {{ to_atom(attribute.name) }}
  {%- endif %}
  """
  {%- endif %}

  {%- if not(attribute.type is mapping) %}
  @spec {{ func_name(attribute.name) }} :: {{ to_atom(attribute.name) }}
  def {{ func_name(attribute.name) }} do
    {{ to_atom(attribute.name) }}
  end
  {%- else %}
  @spec {{ func_name(attribute.name) }}() :: {{ attribute.name | snake_case_const }}()
  def {{ func_name(attribute.name) }}() do
  {{ enum_to_map(attribute.type.members) }}
  end

  @spec {{ func_name(attribute.name) }}({{ enum_value_return_type(attribute.type.members|first|attr('value')) }}) :: {{ enum_value_return_type(attribute.type.members|first|attr('value')) }} 
  def {{ func_name(attribute.name) }}(custom_value) do
    custom_value
  end
  {%- endif %}
{% endfor %}
end
