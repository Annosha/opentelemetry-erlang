{#- waiting on https://github.com/open-telemetry/weaver/pull/207 for split to be available -#}

  {# {{ text | snake_case_const | replace('_', ' ') | split | reject(ctx.id) | join('_') }} #}

{%- import 'common.j2' as c %}
{%- set acronyms = c.acronyms() -%}

{%- set file_name = ctx.output + ctx.id | snake_case ~ "_attributes.ex" -%}
{%- set module_name = (ctx.id | pascal_case) -%}
{{ template.set_file_name(file_name) }}

{%- set module_name = c.format_acronym(ctx.id | pascal_case, acronyms) ~ "Attributes" -%}
{%- if params.stability == "experimental" -%}
{%- set module_namespace = "OpenTelemetry.SemConv.Incubating" -%}
{%- else -%}
{%- set module_namespace = "OpenTelemetry.SemConv" -%}
{%- endif -%}
defmodule {{ module_namespace }}.{{ module_name }} do
  # This is an auto-generated file
  @moduledoc """
  OpenTelemetry Semantic Conventions for {{ c.format_acronym(ctx.id | title, acronyms) }} attributes.
  """
{%- for attribute in ctx.attributes | sort(attribute="name") %}
  {% if attribute.type is mapping %}
  @typedoc """
  {{ c.strong_reqs(attribute.brief) }}

  ### Enum Values
  {% for member in attribute.type.members -%}
  * `{{ c.to_atom(member.id) }}`
  {%- if member is experimental %} ^[e](`m:OpenTelemetry.SemConv#experimental`)^{% endif %}{% if member.brief != none %} - {% if member is deprecated %}**deprecated** ~~{% endif %}{{ member.brief }}{% if member is deprecated %}~~{% endif %}{% endif %}
  {% endfor -%}
  """
  @type {{ attribute.name | snake_case_const }}() :: {{ c.enum_to_map(attribute.type.members) }}
  {%- endif -%}
 
  {% if attribute is deprecated %}
  @deprecated """
  {{ attribute.deprecated | replace("\n", "\n  ") }}
  """
  {%- endif -%}
  {% if not(attribute is deprecated) %}
  @doc """
  {{ c.strong_reqs(attribute.brief | replace("\n", "\n  ")) }}
  {% if (attribute.type is simple_type) or (attribute.type is template_type) -%}
  ### Value type

  Value must be of type `{{ attribute.type | map_text("elixir_types") }}`.
  {%- endif %}
  {%- if attribute.note %}
  ### Notes

  {{ c.strong_reqs(attribute.note | replace("\n", "\n  ")) }}
  {%- endif %}
  {%- if attribute.examples %}
  ### Examples

  ```
  {{ attribute.examples }}
  ```

  {%- endif %}

  <!-- tabs-open -->
  {%- if attribute.type is mapping %}

  ### Elixir

      iex> {{ module_namespace }}.{{ module_name }}.{{ c.func_name(attribute.name) }}().{{ attribute.type.members|first|attr('id') }}
      {{ c.enum_value_to_elixir_type(attribute.type.members|first|attr('value')) }}
      
      iex> {{ module_namespace }}.{{ module_name }}.{{ c.func_name(attribute.name) }}({{ c.enum_value_return_type_example(attribute.type.members|first|attr('value')) }})
      {{ c.enum_value_return_type_example(attribute.type.members|first|attr('value')) }}

  ### Erlang

  ```erlang
  ?'{{ attribute.name | snake_case_const }}.{{ attribute.type.members|first|attr('id') }}'.
  {{ attribute.type.members|first|attr('value') }}
  
  ?{{ attribute.name | snake_case_const }}({{ c.erlang_enum_value_return_type_example(attribute.type.members|first|attr('value')) }}).
  {{ c.erlang_enum_value_return_type_example(attribute.type.members|first|attr('value')) }}
  ```
  {%- else %}
  
  ### Elixir

      iex> {{ module_namespace }}.{{ module_name }}.{{ c.func_name(attribute.name) }}()
      {{ c.to_atom(attribute.name) }}

  ### Erlang

  ```erlang
  ?{{ attribute.name | snake_case_const | upper }}.
  '{{ attribute.name }}'
  ```
  {%- endif %}

  <!-- tabs-close -->
  """
  {%- endif %}

  {%- if not(attribute.type is mapping) %}
  @spec {{ c.func_name(attribute.name) }} :: {{ c.to_atom(attribute.name) }}
  def {{ c.func_name(attribute.name) }} do
    {{ c.to_atom(attribute.name) }}
  end
  {%- else %}
  @spec {{ c.func_name(attribute.name) }}() :: {{ attribute.name | snake_case_const }}()
  def {{ c.func_name(attribute.name) }}() do
  {{ c.enum_to_map(attribute.type.members) }}
  end

  @spec {{ c.func_name(attribute.name) }}({{ c.enum_value_return_type(attribute.type.members|first|attr('value')) }}) :: {{ c.enum_value_return_type(attribute.type.members|first|attr('value')) }} 
  def {{ c.func_name(attribute.name) }}(custom_value) do
    custom_value
  end
  {%- endif %}
{% endfor %}
end