{%- macro upFirst(text) -%}
  {{ text[0] | upper}}{{text[1:] }}
{%- endmacro -%}
{%- macro funcName(text) -%}
  {{ text | regex_replace(pattern="\.", replace="_") }}
{%- endmacro -%}
{%- macro toAtom(text) -%}
{%- if text.find('.') != -1 %}:"{{ text }}"{%- else %}:{{ text }}{%- endif %}
{%- endmacro -%}
{%- macro to_elixir_type(value) -%}
  {%- if value|string == value -%}
    {{ toAtom(value) }}
  {%- elif value == value|int -%}
    {{ value }}
  {%- else -%}
    unmatchedtype: {{ value }}
  {%- endif -%}
{%- endmacro -%}
{%- macro excluded_namespaces() -%}
('android', 'aspnetcore', 'cloud', 'dotnet', 'ios', 'jvm', 'signalr')
{%- endmacro -%}
{%- macro strong_reqs(string) -%}
  {{ string | regex_replace(pattern="(?<!\*\*)MUST NOT", replace="**MUST NOT**") | regex_replace(pattern="(?<!\*\*)MUST", replace="**MUST**") | regex_replace(pattern="(?<!\*\*)SHOULD NOT", replace="**SHOULD NOT**") | regex_replace(pattern="(?<!\*\*)SHOULD", replace="**SHOULD**") | regex_replace(pattern="(?<!\*\*)MAY", replace="**MAY**") | regex_replace(pattern="(?<=\s)NOT(?=\s)", replace="**NOT**") }}
{%- endmacro -%}

defmodule OpenTelemetry.SemanticConventions.{{ module|to_camelcase|first_up }} do
  @moduledoc """
  OpenTelemetry Semantic Conventions for Attributes.
  """
{%- for attribute in attributes | unique(attribute="fqn") %}
  {%- if attribute.is_enum and attribute.root_namespace not in excluded_namespaces() %}
  {%- set type_name = attribute.fqn | to_const_name() %}
  {%- set type = attribute.attr_type.enum_type %}
  {% if attribute.root_namespace != '' %}
  @doc namespace: {{ toAtom(attribute.root_namespace) }}
  {%- endif %}
  @typedoc """
  {{ strong_reqs(attribute.brief | to_doc_brief) }}

  ### Options
  {% for member in attribute.attr_type.members %}
  * `{{ to_elixir_type(member.value) }}`
  {%- if member|is_experimental %}^[e](`m:OpenTelemetry.SemanticConventions#experimental`)^{% endif %} - {% if member|is_deprecated %}**deprecated** ~~{% endif %}{{ member.brief | to_doc_brief }}{% if member|is_deprecated %}~~{% endif %}
  {% endfor %}
  """
  @type {{ attribute.fqn|to_const_name|lower }}() ::
    {%- for member in attribute.attr_type.members -%}
    {% if loop.first %} {% endif %}{{ to_elixir_type(member.value) }}{% if not loop.last %} | {% endif %}{% if attribute.attr_type.custom_values and loop.last %} | atom(){% endif %}
    {%- endfor -%}
  {%- endif %}
{%- endfor %}

  @doc """
  The URL of the OpenTelemetry schema for these keys and values.

      iex> OpenTelemetry.SemanticConventions.{{ upFirst(module) }}.schema_url()
      "{{ schema_uri }}"
  """
  @spec schema_url :: String.t()
  def schema_url do
    "{{ schema_uri }}"
  end

{%- for attribute in attributes | unique(attribute="fqn") %}
  {%- if attribute.is_local and attribute.root_namespace not in excluded_namespaces() %}
  {% if attribute.root_namespace != '' %}
  @doc namespace: {{ toAtom(attribute.root_namespace) }}
  {% endif -%}
  {%- if attribute|is_deprecated %}
  @deprecated """
  {{ attribute.deprecated | to_doc_brief | regex_replace(pattern="\n", replace="\n  ") }}
  """
  {%- else -%}
  @doc """
  {{ strong_reqs(attribute.brief | to_doc_brief | regex_replace(pattern="\n", replace="\n  ")) }}
  {%- if attribute.note %}

  ### Notes

  {{ strong_reqs(attribute.note | to_doc_brief | regex_replace(pattern="\n", replace="\n  ")) }}
  {%- endif %}

      iex> OpenTelemetry.SemanticConventions.{{ upFirst(module) }}.{{ funcName(attribute.fqn) }}()
      :"{{ attribute.fqn }}"
  """
  {%- endif %}
  @spec {{ funcName(attribute.fqn) }} :: {{ toAtom(attribute.fqn) }}
  def {{ funcName(attribute.fqn) }} do
    {{ toAtom(attribute.fqn) }}
  end
  {%- endif -%}
{%- endfor %}
end
